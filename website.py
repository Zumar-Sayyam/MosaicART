# -*- coding: utf-8 -*-
"""website.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tNpPM_qGLKxV0eq1Dpy2QqMEPig_bTqO
"""

import streamlit as st
from PIL import Image
import numpy as np
import io

# Page settings
st.set_page_config(page_title="üé≤ Dice Mosaic Generator", layout="centered")

st.title("üé≤ Dice Mosaic Art Generator")
st.markdown("Upload an image, set your dice size, and get a pixelated mosaic made with dice!")

# Upload image
uploaded_file = st.file_uploader("üì§ Upload your image (JPG or PNG)", type=["jpg", "jpeg", "png"])

# Dice size input
st.sidebar.header("üé≤ Dice Settings")
dice_width = st.sidebar.number_input("Dice width", min_value=5, max_value=100, value=20)
dice_height = st.sidebar.number_input("Dice height", min_value=5, max_value=100, value=20)
dice_size = (dice_width, dice_height)

# Load dice face images and resize
@st.cache_data
def load_dice_images(size):
    dice_images = {}
    for i in range(1, 7):
        img = Image.open(f'dice {i}.png').resize(size)
        dice_images[i] = img
    return dice_images

# Brightness to dice face
def intensity_to_dice_face(intensity):
    face = 6 - int(np.floor((intensity / 255) * 6))
    return max(1, min(face, 6))

# Create dice mosaic
def create_dice_mosaic(image, dice_size, dice_images):
    width, height = image.size
    pad_w = (dice_size[0] - width % dice_size[0]) % dice_size[0]
    pad_h = (dice_size[1] - height % dice_size[1]) % dice_size[1]
    new_w = width + pad_w
    new_h = height + pad_h

    padded_img = Image.new('RGB', (new_w, new_h), (255, 255, 255))
    padded_img.paste(image, (0, 0))
    img_array = np.array(padded_img)

    mosaic_img = Image.new('RGB', (new_w, new_h))

    for y in range(0, img_array.shape[0], dice_size[1]):
        for x in range(0, img_array.shape[1], dice_size[0]):
            block = img_array[y:y + dice_size[1], x:x + dice_size[0], :]
            avg_color = np.mean(block, axis=(0, 1))
            brightness = np.dot(avg_color, [0.299, 0.587, 0.114])
            face = intensity_to_dice_face(brightness)
            dice_img = dice_images[face]

            # Tint dice with average color
            tinted = Image.new('RGB', dice_size, tuple(avg_color.astype(int)))
            mask = dice_img.convert('L')
            tinted.paste(dice_img, (0, 0), mask)
            mosaic_img.paste(tinted, (x, y))

    return mosaic_img

# Run if image is uploaded
if uploaded_file is not None:
    try:
        img = Image.open(uploaded_file).convert('RGB')
        dice_images = load_dice_images(dice_size)

        st.subheader("üì∑ Original Image:")
        st.image(img, use_column_width=True)

        st.subheader("üé® Dice Mosaic Result:")
        mosaic = create_dice_mosaic(img, dice_size, dice_images)
        st.image(mosaic, use_column_width=True)

        # Download button
        buf = io.BytesIO()
        mosaic.save(buf, format="PNG")
        byte_im = buf.getvalue()

        st.download_button("‚¨á Download Mosaic Image", data=byte_im, file_name="dice_mosaic.png", mime="image/png")

    except Exception as e:
        st.error(f"‚ùå Error: {e}")
else:
    st.info("üëà Upload an image to get started!")